parameters:
  - name: branding
    displayName: "Branding (Build Type)"
    type: string
    default: Release
    values:
      - Release
      - Preview
      - Dev
  - name: buildTerminal
    displayName: "Build Windows Terminal MSIX"
    type: boolean
    default: true
  - name: buildConPTY
    displayName: "Build ConPTY NuGet"
    type: boolean
    default: false
  - name: buildWPF
    displayName: "Build Terminal WPF Control"
    type: boolean
    default: false
  - name: buildEverything
    displayName: "Build Everything (Overrides all other build options)"
    type: boolean
    default: false
  - name: pgoBuildMode
    displayName: "PGO Build Mode"
    type: string
    default: Optimize
    values:
      - Optimize
      - Instrument
      - None
  - name: buildConfigurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
      - x86
      - arm64
  - name: generateSbom
    type: boolean
    default: true
  - name: codeSign
    type: boolean
    default: false
  - name: artifactStem
    type: string
    default: ''
  - name: terminalInternalPackageVersion
    type: string
  - name: pool
    type: object
    default: null

jobs:
- job: Build
  ${{ if ne(length(parameters.pool), 0) }}:
    pool: ${{ parameters.pool }}
  strategy:
    matrix:
      ${{ each config in parameters.buildConfigurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ config }}_${{ platform }}:
            BuildConfiguration: ${{ config }}
            BuildPlatform: ${{ platform }}
            ${{ if eq(platform, 'x86') }}:
              OutputBuildPlatform: Win32
            ${{ else }}:
              OutputBuildPlatform: ${{ platform }}
  variables:
    MakeAppxPath: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\MakeAppx.exe'
    BinDir: $(Build.SourcesDirectory)/bin/$(OutputBuildPlatform)/$(BuildConfiguration)
  displayName: Build
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  steps:
  - checkout: self
    clean: true
    submodules: true
    persistCredentials: True
  - task: PkgESSetupBuild@12
    displayName: Package ES - Setup Build
    inputs:
      disableOutputRedirect: true
  # This generates either an empty string for BuildTargetParameter, or /t:X;Y;Z, to control targets later.
  - pwsh: |-
      If ([bool]::Parse("${{ parameters.buildEverything }}")) {
        Write-Host "##vso[task.setvariable variable=BuildTargetParameter]"
        Write-Host "##vso[task.setvariable variable=SelectedSigningFragments]"
      } Else {
        $BuildTargets = @()
        $SignFragments = @()
        If ([bool]::Parse("${{ parameters.buildTerminal }}")) {
          $BuildTargets += "Terminal\CascadiaPackage"
          $SignFragments += "terminal_constituents"
        }
        If ([bool]::Parse("${{ parameters.buildWPF }}")) {
          $BuildTargets += "Terminal\wpf\PublicTerminalCore"
          $SignFragments += "wpf"
        }
        If ([bool]::Parse("${{ parameters.buildConPTY }}")) {
          $BuildTargets += "Conhost\Host_EXE;Conhost\winconpty_DLL"
          $SignFragments += "conpty"
        }
        Write-Host "Targets: $($BuildTargets -Join ";")"
        Write-Host "Sign targets: $($SignFragments -Join ";")"
        Write-Host "##vso[task.setvariable variable=BuildTargetParameter]/t:$($BuildTargets -Join ";")"
        Write-Host "##vso[task.setvariable variable=SelectedSigningFragments]$($SignFragments -Join ";")"
      }
    displayName: Prepare Build and Sign Targets

  - ${{ if ne(parameters.terminalInternalPackageVersion, '') }}:
    - task: UniversalPackages@0
      displayName: Download terminal-internal Universal Package
      inputs:
        feedListDownload: 2b3f8893-a6e8-411f-b197-a9e05576da48
        packageListDownload: e82d490c-af86-4733-9dc4-07b772033204
        versionListDownload: ${{ parameters.terminalInternalPackageVersion }}

  - template: .\steps-fetch-and-prepare-localizations.yml
    parameters:
      includePseudoLoc: true

  - pwsh: |-
      .\build\scripts\Generate-ThirdPartyNotices.ps1 -MarkdownNoticePath .\NOTICE.md -OutputPath .\src\cascadia\CascadiaPackage\NOTICE.html
    displayName: Generate NOTICE.html from NOTICE.md

  - template: .\steps-restore-nuget.yml

  - task: VSBuild@1
    displayName: Build solution **\OpenConsole.sln
    condition: true
    inputs:
      solution: '**\OpenConsole.sln'
      msbuildArgs: /p:WindowsTerminalOfficialBuild=true;WindowsTerminalBranding=${{ parameters.branding }};PGOBuildMode=${{ parameters.pgoBuildMode }};WindowsTerminalReleaseBuild=true /bl:$(Build.SourcesDirectory)\msbuild.binlog $(BuildTargetParameter)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      maximumCpuCount: true

  - publish: $(Build.SourcesDirectory)/msbuild.binlog
    artifact: logs-$(BuildPlatform)-$(BuildConfiguration)${{ parameters.artifactStem }}
    condition: always()
    displayName: Publish binlog

  # This saves 1.5GB per architecture. We won't need these later.
  # Removes:
  # - Directories ending in Lib (static lib projects that we fully linked into DLLs)
  # - All PDB files inside the WindowsTerminal/ output, which do not belong there.
  - pwsh: |-
      Get-ChildItem '$(BinDir)' -Filter '*Lib' -Directory | Remove-Item -Force -Recurse -Verbose
      Get-ChildItem '$(BinDir)\WindowsTerminal' -Filter '*.pdb' -ErrorAction:Ignore | Where-Object Name -Ne "WindowsTerminal.pdb" | Remove-Item -Verbose
    displayName: Clean up static libs and extra symbols

  - pwsh: |-
      build\scripts\Index-Pdbs.ps1 -SearchDir '$(BinDir)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
    displayName: Source Index PDBs
    errorActionPreference: silentlyContinue

  - ${{ if or(parameters.buildTerminal, parameters.buildEverything) }}:
    - pwsh: |-
        $Package = (Get-ChildItem -Recurse -Filter "CascadiaPackage*.msix" | Select -First 1)
        $PackageFilename = $Package.FullName
        Write-Host "##vso[task.setvariable variable=WindowsTerminalPackagePath]${PackageFilename}"
      displayName: Locate the MSIX

    - pwsh: |-
        .\build\scripts\Test-WindowsTerminalPackage.ps1 -Verbose -Path "$(WindowsTerminalPackagePath)"
      displayName: Check MSIX for common regressions
      
    - ${{ if eq(parameters.codeSign, true) }}:
      - pwsh: |-
          & "$(MakeAppxPath)" unpack /p "$(WindowsTerminalPackagePath)" /d "$(BinDir)/PackageContents"
        displayName: Unpack the MSIX for signing

  - ${{ if eq(parameters.codeSign, true) }}:
    - template: steps-create-signing-config.yml
      parameters:
        outFile: '$(Build.SourcesDirectory)/ESRPSigningConfig.json'
        stage: build
        fragments: $(SelectedSigningFragments)

    # Code-sign everything we just put together.
    # We run the signing in BinDir, because all of the signing batches are relative to the final architecture/configuration output folder.
    - task: EsrpCodeSigning@1
      displayName: Submit Signing Request
      inputs:
        ConnectedServiceName: 9d6d2960-0793-4d59-943e-78dcb434840a
        FolderPath: '$(BinDir)'
        signType: batchSigning
        batchSignPolicyFile: '$(Build.SourcesDirectory)/ESRPSigningConfig.json'

    # We only need to re-pack the MSIX if we actually signed, so this can stay in the codeSign conditional
    - ${{ if or(parameters.buildTerminal, parameters.buildEverything) }}:
      - pwsh: |-
          $outDir = New-Item -Type Directory "$(BinDir)/_appx" -ErrorAction:Ignore
          $PackageFilename = Join-Path $outDir.FullName (Split-Path -Leaf "$(WindowsTerminalPackagePath)")
          & "$(MakeAppxPath)" pack /h SHA256 /o /p $PackageFilename /d "$(BinDir)/PackageContents"
          Write-Host "##vso[task.setvariable variable=WindowsTerminalPackagePath]${PackageFilename}"
        displayName: Re-pack the new Terminal package after signing

  - ${{ else }}: # No Signing
    - ${{ if or(parameters.buildTerminal, parameters.buildEverything) }}:
      - pwsh: |-
          $outDir = New-Item -Type Directory "$(BinDir)/_appx" -ErrorAction:Ignore
          $PackageFilename = Join-Path $outDir.FullName (Split-Path -Leaf "$(WindowsTerminalPackagePath)")
          Copy-Item "$(WindowsTerminalPackagePath)" $PackageFilename
          Write-Host "##vso[task.setvariable variable=WindowsTerminalPackagePath]${PackageFilename}"
        displayName: Stage the package (unsigned)

  - ${{ if or(parameters.buildTerminal, parameters.buildEverything) }}:
    - pwsh: |-
        $XamlAppxPath = (Get-Item "src\cascadia\CascadiaPackage\AppPackages\*\Dependencies\$(BuildPlatform)\Microsoft.UI.Xaml*.appx").FullName
        $outDir = New-Item -Type Directory "$(BinDir)/_unpackaged" -ErrorAction:Ignore
        & .\build\scripts\New-UnpackagedTerminalDistribution.ps1 -TerminalAppX $(WindowsTerminalPackagePath) -XamlAppX $XamlAppxPath -Destination $outDir.FullName
      displayName: Build Unpackaged Distribution (from MSIX)

# - task: PublishSymbols@2
#   displayName: Publish symbols path
#   continueOnError: True
#   inputs:
#     SearchPattern: |
#       $(BinDir)/**/*.pdb
#       $(BinDir)/**/*.exe
#       $(BinDir)/**/*.dll
#     IndexSources: false
#     SymbolServerType: TeamServices
  
  - ${{ if eq(parameters.generateSbom, true) }}:
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generate SBOM manifest'
      inputs:
        BuildDropPath: 'bin'

    - task: DropValidatorTask@0
      displayName: 'Validate SBOM manifest'
      inputs:
        BuildDropPath: 'bin'
        OutputPath: 'output.json'
        ValidateSignature: true
        Verbosity: 'Verbose'

  - publish: bin/$(OutputBuildPlatform)/$(BuildConfiguration)
    artifact: build-$(BuildPlatform)-$(BuildConfiguration)${{ parameters.artifactStem }}
    displayName: Publish All Outputs
